{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","className","data","this","radarChartData","options","dragData","dragDataRound","showTooltip","title","display","displayTitle","text","location","fontSize","legend","displayLegend","position","legendPosition","scale","ticks","beginAtZero","max","lineChartData","scales","yAxes","min","stepSize","Component","defaultProps","App","state","getChartData","search","window","params","URLSearchParams","refresh_token","get","mode","form_data","fetch","method","body","JSON","stringify","headers","then","response","json","databyTrack","dataByAttribute","setState","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wNAIMA,G,mBACJ,WAAYC,GAAO,qEACXA,I,sEAWN,OACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEC,KAAMC,KAAKH,MAAMI,eACjBC,QAAS,CAEPC,UAAU,EACVC,cAAc,EACdC,aAAa,EACbC,MAAM,CACJC,QAAQP,KAAKH,MAAMW,aACnBC,KAAKT,KAAKH,MAAMa,SAChBC,SAAS,IAEXC,OAAO,CACLL,QAAQP,KAAKH,MAAMgB,cACnBC,SAASd,KAAKH,MAAMkB,gBAEtBC,MAAM,CACJC,MAAM,CACJC,aAAa,EACbC,IAAK,OAKb,kBAAC,IAAD,CACEpB,KAAMC,KAAKH,MAAMuB,cACjBlB,QAAS,CAEPC,UAAU,EACVC,cAAc,EACdE,MAAM,CACJC,QAAQP,KAAKH,MAAMW,aACnBC,KAAKT,KAAKH,MAAMa,SAChBC,SAAS,IAEXU,OAAO,CACLC,MAAM,CAAC,CACLL,MAAM,CACJM,IAAK,EACLJ,IAAK,EACLK,SAAU,OAIhBZ,OAAO,CACLL,QAAQP,KAAKH,MAAMgB,cACnBC,SAASd,KAAKH,MAAMkB,wB,GA7DdU,cAAd7B,EAKG8B,aAAe,CACpBlB,cAAa,EACbK,eAAe,EACfE,eAAe,QACfL,SAAS,QA6DEd,QCdA+B,E,YArDb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACX3B,eAAe,GACfmB,cAAc,IAJL,E,iFASVpB,KAAK6B,iB,qCAGO,IAAD,OAERC,EAASC,OAAOrB,SAASoB,OACzBE,EAAS,IAAIC,gBAAgBH,GAC7B/B,EAAO,CACTmC,cAAeF,EAAOG,IAAI,iBAC1BC,KAAMJ,EAAOG,IAAI,QACjBE,UAAWL,EAAOG,IAAI,cAIxBG,MAFc,6BAEA,CACVF,KAAM,OACNG,OAAQ,OACRC,KAAMC,KAAKC,UAAU3C,GACrB4C,QAAS,CACP,eAAgB,sBAGrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA7C,GACJ,IAAMgD,EAAchD,EAAKgD,YACnBC,EAAkBjD,EAAKiD,gBAE7B,EAAKC,SAAS,CACZhD,eAAe8C,EACf3B,cAAc4B,S,+BAOlB,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,CAAOG,eAAgBD,KAAK4B,MAAM3B,eAAgBmB,cAAepB,KAAK4B,MAAMR,cAAeV,SAAS,iBAAiBK,eAAe,gB,GAhD1HU,aCMEyB,QACW,cAA7BnB,OAAOrB,SAASyC,UAEe,UAA7BpB,OAAOrB,SAASyC,UAEhBpB,OAAOrB,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a6675d20.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Line, Radar } from 'react-chartjs-2';\nimport 'chartjs-plugin-dragdata';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    location:'City'\n  }\n\n  render(){\n    return (\n      <div className=\"chart\">\n        <Radar\n          data={this.props.radarChartData}\n          options={{\n            //draggable chart js configs\n            dragData: true,\n            dragDataRound:1,\n            showTooltip: true,\n            title:{\n              display:this.props.displayTitle,\n              text:this.props.location,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            },\n            scale:{\n              ticks:{\n                beginAtZero: true,\n                max: 1\n              }\n            }\n          }}\n        />\n        <Line\n          data={this.props.lineChartData}\n          options={{\n            //draggable chart js configs\n            dragData: true,\n            dragDataRound:1,\n            title:{\n              display:this.props.displayTitle,\n              text:this.props.location,\n              fontSize:25\n            },\n            scales:{\n              yAxes:[{\n                ticks:{\n                  min: 0,\n                  max: 1,\n                  stepSize: 0.1\n                }\n              }]\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      radarChartData:{},\n      lineChartData:{}\n    }\n  }\n \n   componentDidMount(){\n     this.getChartData();\n   }\n\n  getChartData(){\n    // hacky special to grab refresh token from URL\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let data = {\n      refresh_token: params.get('refresh_token'),\n      mode: params.get('mode'),\n      form_data: params.get('form_data')\n    };\n    let posturl = 'http://127.0.0.1:7000/data';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      const databyTrack = data.databyTrack\n      const dataByAttribute = data.dataByAttribute\n      \n      this.setState({\n        radarChartData:databyTrack,\n        lineChartData:dataByAttribute\n      });\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart radarChartData={this.state.radarChartData} lineChartData={this.state.lineChartData} location=\"Audio Features\" legendPosition=\"bottom\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}