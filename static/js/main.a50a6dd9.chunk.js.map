{"version":3,"sources":["components/RadioForm.js","components/ToggleForm.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","require","firstrun","isLoading","RadioForm","props","state","selectedPlaylist","playlists","playlistIDs","playlistNames","playlistIndicators","changePlaylist","bind","handleSubmit","playlist","this","setState","event","preventDefault","selectedPlaylistName","selectedPlaylistIndexNumber","indexOf","selectedPlaylistID","console","log","fullURL","concat","refreshToken","mode","window","location","href","data","map","playlistname","push","playlistID","playlistName","RadioComponentList","onSubmit","type","value","i","name","checked","onChange","length","error","className","style","display","justifyContent","alignItems","height","fadeIn","React","Component","ToggleForm","handleChange","e","indexNumber","newState","selectedPlaylists","playlistIDstring","join","checkBoxComponentList","toggle","App","search","params","URLSearchParams","refresh_token","get","fetch","method","body","JSON","stringify","headers","then","response","json","apiData","userPlaylists","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a50a6dd9.chunk.js","sourcesContent":["import React from \"react\";\nimport { FormRadio } from \"shards-react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nvar Spinner = require('react-spinkit');\nvar firstrun = true;\nvar isLoading = true;\n\nclass RadioForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedPlaylist: null,\n      playlists: [],\n      playlistIDs: [],\n      playlistNames: [],\n      playlistIndicators: []\n    };\n\n    this.changePlaylist = this.changePlaylist.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  changePlaylist(playlist) {\n    this.setState({\n      selectedPlaylist: playlist\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    var selectedPlaylistName = this.state.selectedPlaylist\n    var selectedPlaylistIndexNumber = this.state.playlistNames.indexOf(selectedPlaylistName);\n    var selectedPlaylistID = this.state.playlistIDs[selectedPlaylistIndexNumber]\n\n    console.log('selected playlist ID', selectedPlaylistID)\n    \n    \n    let baseURL = 'https://music-in-context.herokuapp.com/ui?'\n    let fullURL = baseURL.concat('refresh_token=',this.props.refreshToken,'&form_data=',selectedPlaylistID,'&mode=',this.props.mode)\n\n  window.location.href = fullURL\n  }\n  \n\n  render() {\n    try{\n      this.props.data.map((playlist) => {\n        this.state[playlist.playlistname] = this.state[playlist.playlistname]\n        if(firstrun){\n          this.state.playlists.push(playlist);\n          this.state.playlistIDs.push(playlist.playlistID);\n          this.state.playlistNames.push(playlist.playlistName);\n          this.state.playlistIndicators.push(false);\n        }\n        })\n        firstrun = false;\n        console.log(\"state after pushing data\", this.state)\n\n      let RadioComponentList = [];\n      RadioComponentList.push(<form onSubmit={this.handleSubmit}><input type=\"submit\" value=\"Submit\" /></form>)\n      \n      for(let i=0; i<this.state.playlists.length; i++) {\n        let playlistName = this.state.playlistNames[i];\n        RadioComponentList.push(\n        <FormRadio\n          name=\"playlist\"\n          checked={this.state.selectedPlaylist === playlistName}\n          onChange={() => {\n            this.changePlaylist(playlistName);\n          }}\n        >\n          {playlistName}\n        </FormRadio>\n        )\n      }\n\n      RadioComponentList.push(<form onSubmit={this.handleSubmit}><input type=\"submit\" value=\"Submit\" /></form>)\n\n      return RadioComponentList\n      \n    \n    }\n    catch(error){\n      console.log('still loading');\n      isLoading = true;\n    }\n    if (isLoading) {\n      return (\n        <div className=\"chart\">\n          <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '50vh'}}>\n            <Spinner name='ball-triangle-path' fadeIn='none'/>\n          </div>\n          <div>\n            <h1>Loading user playlists...</h1>\n          </div>\n        </div>\n      )\n    }\n\n  }\n}\n\nexport default RadioForm;","import React from \"react\";\nimport { FormCheckbox } from \"shards-react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nvar Spinner = require('react-spinkit');\nvar firstrun = true;\nvar isLoading = true;\n\nclass ToggleForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      playlists: [],\n      playlistIDs: [],\n      playlistNames: [],\n      playlistIndicators: []\n    };\n  }\n\n  handleChange(e, playlistName) {\n    var indexNumber = this.state.playlistNames.indexOf(playlistName);\n    const newState = {};\n\n    newState[playlistName] = !this.state[playlistName];\n    this.setState({ ...this.state, ...newState });\n    this.state.playlistIndicators[indexNumber] = newState[playlistName]\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var selectedPlaylists = []\n    for(let i=0; i<this.state.playlistIndicators.length; i++) {\n      if(this.state.playlistIndicators[i]){\n        selectedPlaylists.push(this.state.playlistIDs[i])\n      }\n    }\n    let playlistIDstring = selectedPlaylists.join(',')\n    \n    let baseURL = 'https://music-in-context.herokuapp.com/ui?'\n    let fullURL = baseURL.concat('refresh_token=',this.props.refreshToken,'&form_data=',playlistIDstring,'&mode=',this.props.mode)\n\n  window.location.href = fullURL\n  }\n\n  render() {\n\n    try {\n      this.props.data.map((playlist) => {\n      this.state[playlist.playlistname] = this.state[playlist.playlistname]\n      if(firstrun){\n        this.state.playlists.push(playlist);\n        this.state.playlistIDs.push(playlist.playlistID);\n        this.state.playlistNames.push(playlist.playlistName);\n        this.state.playlistIndicators.push(false);\n      }\n      })\n      firstrun = false;\n      console.log(\"state after pushing data\", this.state)\n\n      let checkBoxComponentList = [];\n      \n      for(let i=0; i<this.state.playlists.length; i++) {\n        let playlistName = this.state.playlistNames[i];\n        checkBoxComponentList.push(\n        <FormCheckbox\n          toggle\n          checked= {this.state[playlistName]}\n          onChange={e => this.handleChange(e, playlistName)}\n        >\n          {playlistName}\n        </FormCheckbox>\n        )\n      }\n\n      checkBoxComponentList.push(<form onSubmit={this.handleSubmit}><input type=\"submit\" value=\"Submit\" /></form>)\n      \n    return checkBoxComponentList\n    }\n    catch(error) {\n      console.log('still loading');\n      isLoading = true;\n    }\n    if (isLoading) {\n      return (\n        <div className=\"chart\">\n          <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '50vh'}}>\n            <Spinner name='ball-triangle-path' fadeIn='none'/>\n          </div>\n          <div>\n            <h1>Loading user playlists...</h1>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default ToggleForm;","import React, { Component } from 'react';\nimport './App.css';\nimport RadioForm from './components/RadioForm';\nimport ToggleForm from './components/ToggleForm';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nvar Spinner = require('react-spinkit');\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n    }\n  }\n \n  componentDidMount() {\n     let search = window.location.search;\n     let params = new URLSearchParams(search);\n     let data = {\n       refresh_token: params.get('refresh_token'),\n       mode: params.get('mode')\n     };\n    \n    let posturl = 'https://music-in-context-backend.herokuapp.com/getuserplaylists';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      console.log('data from post', data)\n      this.setState({\n        apiData: data.userPlaylists,\n        refreshToken: data.refreshToken,\n        mode: data.mode\n      });\n    })\n  }\n\n  render() {\n    if(this.state.mode === 'playlist'){\n    return (\n      <div className=\"App\">\n        <RadioForm  mode={this.state.mode} refreshToken={this.state.refreshToken} data={this.state.apiData}/>\n      </div>\n    );\n  }\n  else if(this.state.mode === 'cluster'){\n    return (\n      <div className=\"App\">\n        <ToggleForm  mode={this.state.mode} refreshToken={this.state.refreshToken} data={this.state.apiData}/>\n      </div>\n    );\n  }\n  else{\n    return(\n      <div className=\"loading\">\n        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '50vh'}}>\n          <Spinner name='ball-triangle-path' fadeIn='none'/>\n        </div>\n        <div>\n          <h1>Loading user playlists...</h1>\n        </div>\n      </div>\n    )\n  }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}