{"version":3,"sources":["components/ToggleForm.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","require","firstrun","isLoading","ToggleForm","props","handleChange","bind","handleSubmit","state","playlists","playlistIDs","playlistNames","playlistIndicators","clusters","clusterIDs","clusterDescriptions","clusterMostFrequentArtists","clusterMostFrequentGenres","clusterIndicators","e","clusterDescrip","indexNumber","this","indexOf","newState","setState","event","preventDefault","selectedClusters","i","length","push","clusterIDstring","join","fullURL","concat","refreshToken","mode","window","location","href","data","map","playlist","playlistname","playlistID","playlistName","clusterNumber","clusterDescription","mostFrequentGenres","mostFrequentArtists","console","log","checkBoxComponentList","clusterName","toggle","checked","onChange","onSubmit","type","value","error","className","style","display","justifyContent","alignItems","height","name","fadeIn","React","Component","App","search","params","URLSearchParams","refresh_token","get","fetch","method","body","JSON","stringify","headers","then","response","json","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5fc031d5.chunk.js","sourcesContent":["import React from \"react\";\nimport { FormCheckbox } from \"shards-react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nvar Spinner = require('react-spinkit');\nvar firstrun = true;\nvar isLoading = true;\n\nclass ToggleForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      playlists: [],\n      playlistIDs: [],\n      playlistNames: [],\n      playlistIndicators: [],\n      clusters:[],\n      clusterIDs:[],\n      clusterDescriptions: [],\n      clusterMostFrequentArtists:[],\n      clusterMostFrequentGenres:[],\n      clusterIndicators:[],\n    };\n  }\n\n  handleChange(e, clusterDescrip) {\n    var indexNumber = this.state.clusterDescriptions.indexOf(clusterDescrip);\n    const newState = {};\n\n    newState[clusterDescrip] = !this.state[clusterDescrip];\n    this.setState({ ...this.state, ...newState });\n    this.state.clusterIndicators[indexNumber] = newState[clusterDescrip]\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var selectedClusters = []\n    for(let i=0; i<this.state.clusterIndicators.length; i++) {\n      if(this.state.clusterIndicators[i]){\n        selectedClusters.push(this.state.clusterIDs[i])\n      }\n    }\n    let clusterIDstring = selectedClusters.join(',')\n    \n    let baseURL = 'https://music-in-context.herokuapp.com/ui?'\n    let fullURL = baseURL.concat('refresh_token=',this.props.refreshToken,'&form_data=',clusterIDstring,'&mode=',this.props.mode)\n\n  window.location.href = fullURL\n  }\n\n  render() {\n\n    try {\n      this.props.data.map((playlist) => {\n      this.state[playlist.playlistname] = this.state[playlist.playlistname]\n      if(firstrun){\n        this.state.playlists.push(playlist);\n        this.state.playlistIDs.push(playlist.playlistID);\n        this.state.playlistNames.push(playlist.playlistName);\n        this.state.playlistIndicators.push(false);\n\n        //NEW\n        this.state.clusters.push(playlist);\n        this.state.clusterIDs.push(playlist.clusterNumber);\n        let clusterDescription = \"This sub-collection contains the following genres: \"+ playlist.mostFrequentGenres.join()+\" and the following artists: \"+ playlist.mostFrequentArtists.join();\n        console.log(clusterDescription)\n        this.state.clusterDescriptions.push(clusterDescription)\n        this.state.clusterIndicators.push(false);\n      }\n      })\n      firstrun = false;\n      console.log(\"state after pushing data\", this.state)\n\n      let checkBoxComponentList = [];\n\n      checkBoxComponentList.push(<h3>Select one or more collections for inclusion in your custom playlist</h3>)\n      \n      for(let i=0; i<this.state.playlists.length; i++) {\n        let clusterName = this.state.clusterDescriptions[i];\n        checkBoxComponentList.push(\n        <FormCheckbox\n          toggle\n          checked= {this.state[clusterName]}\n          onChange={e => this.handleChange(e, clusterName)}\n        >\n          {clusterName}\n        </FormCheckbox>\n        )\n      }\n\n      checkBoxComponentList.push(<form onSubmit={this.handleSubmit}><input type=\"submit\" value=\"Submit\" /></form>)\n      \n    return checkBoxComponentList\n    }\n    catch(error) {\n      console.log('still loading');\n      isLoading = true;\n    }\n    if (isLoading) {\n      return(\n        <div className=\"loading\">\n          <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '50vh'}}>\n            <Spinner name='ball-triangle-path' fadeIn='none'/>\n          </div>\n          <div>\n            <h1>Building a pool of recommended tracks</h1>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default ToggleForm;","import React, { Component } from 'react';\nimport './App.css';\nimport ToggleForm from './components/ToggleForm';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nvar Spinner = require('react-spinkit');\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n    }\n  }\n \n  componentDidMount() {\n     let search = window.location.search;\n     let params = new URLSearchParams(search);\n     let data = {\n       refresh_token: params.get('refresh_token'),\n       mode: params.get('mode')\n     };\n    \n    let posturl = 'https://music-in-context-backend.herokuapp.com/clustertracks';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      console.log('data from post', data)\n      this.setState({\n        clusters: data.clusters,\n        refreshToken: data.refreshToken,\n        mode: data.mode\n      });\n    })\n  }\n\n  render() {\n    return(\n    <div className=\"App\">\n      <ToggleForm  mode={this.state.mode} refreshToken={this.state.refreshToken} data={this.state.clusters}/>\n    </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}