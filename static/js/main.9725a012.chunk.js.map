{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","require","isLoading","Chart","incomingData","trackNames","subTrackData","subAudioFeatureData","Object","keys","this","props","rawIncomingData","map","key","spotifyAudioFeatures","audioFeature","rawDataByTrack","track","push","trackName","dataByAudioFeature","datasets","labels","dataByTrack","colorIndexAF","newAudioFeaturesObject","label","data","fill","borderColor","colors","length","colorIndexBT","newTrackObject","error","console","log","className","style","display","justifyContent","alignItems","height","name","fadeIn","mode","options","title","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","scale","ticks","beginAtZero","max","onSubmit","e","type","value","dragData","dragDataRound","showTooltip","onDragStart","element","onDrag","datasetIndex","index","target","cursor","onDragEnd","hover","onHover","getElementAtEvent","scales","yAxes","min","stepSize","Component","defaultProps","App","handleDrag","selectedAttribute","state","setState","prevState","selectedTrack","assign","audioFeatures","event","preventDefault","search","window","location","params","URLSearchParams","refresh_token","get","fetch","method","body","JSON","stringify","previousTrackList","previousTrackIDs","trackIDs","headers","then","response","json","newTracks","form_data","handleSubmit","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9725a012.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Line, Radar } from 'react-chartjs-2';\nimport 'chartjs-plugin-dragdata';\n\nvar Spinner = require('react-spinkit');\n\nlet isLoading = true;\n\nclass Chart extends Component{\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right'\n    //location:'City'\n  }\n\n  render(){\n    \n    //unpack data into chart-able format\n    var incomingData = {\n      trackNames: [],\n      subTrackData: {},\n      subAudioFeatureData: {}\n    }\n    // pull data from props into new object\n    try {\n      Object.keys(this.props.rawIncomingData).map(key => (\n        incomingData[key] = this.props.rawIncomingData[key]\n        )\n      )\n      //assign blank arrays to store data by attribute\n      incomingData.spotifyAudioFeatures.map((audioFeature) => {\n        incomingData.subAudioFeatureData[audioFeature] = []\n      })\n      // push each data point on to the corresponding array\n      incomingData.rawDataByTrack.map((track) => {\n        incomingData['trackNames'].push(track.trackName)\n        incomingData.subTrackData[track.trackName] = []\n        //loop thru audio features appending to relevant arrays\n        {incomingData.spotifyAudioFeatures.map((audioFeature) => {\n          incomingData.subAudioFeatureData[audioFeature].push(track['audioFeatures'][audioFeature])\n          incomingData.subTrackData[track.trackName].push(track['audioFeatures'][audioFeature])\n        })}\n      })      \n      //create the dataByAttribute object\n      incomingData.dataByAudioFeature = {\n        datasets: [],\n        labels: incomingData.trackNames\n      }\n      incomingData.dataByTrack = {\n        datasets: [],\n        labels: incomingData.spotifyAudioFeatures\n      }\n      // create an object for each attribute\n      let colorIndexAF = 0;\n      incomingData.spotifyAudioFeatures.map((audioFeature) => {\n        let newAudioFeaturesObject = {\n          label: audioFeature,\n          data: incomingData.subAudioFeatureData[audioFeature],\n          fill: false,\n          borderColor: incomingData.colors[colorIndexAF]\n        }\n        colorIndexAF += 1\n        if (colorIndexAF === incomingData.colors.length){\n          colorIndexAF = 0\n        }\n        incomingData.dataByAudioFeature.datasets.push(newAudioFeaturesObject)\n      })\n      // create an object for each track\n      let colorIndexBT = 0;\n      incomingData.rawDataByTrack.map((track) => {\n        let newTrackObject = {\n          label: track.trackName,\n          data: incomingData.subTrackData[track.trackName],\n          fill: false,\n          borderColor: incomingData.colors[colorIndexBT]\n        }\n        colorIndexBT += 1\n        if (colorIndexBT === incomingData.colors.length){\n          colorIndexBT = 0\n        }\n        incomingData.dataByTrack.datasets.push(newTrackObject)\n      })\n      isLoading = false;\n    }\n    catch (error) {\n      console.log('still loading data');\n      isLoading = true;\n    }\n\n    if (isLoading) {\n      return (\n        <div className=\"loading\">\n          <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '50vh'}}>\n            <Spinner name='ball-triangle-path' fadeIn='none'/>\n          </div>\n          <div>\n            <h1>Loading track data...</h1>\n          </div>\n        </div>\n      )\n\n    }\n    if (incomingData.mode === 'cluster'){\n      return (\n        <div className=\"chart\">\n          <Radar\n            data={incomingData.dataByTrack}\n            options={{\n              title:{\n                display:this.props.displayTitle,\n                text:this.props.title,\n                fontSize:25\n              },\n              legend:{\n                display:this.props.displayLegend,\n                position:this.props.legendPosition\n              },\n              scale:{\n                ticks:{\n                  beginAtZero: true,\n                  max: 1\n                }\n              }\n            }}\n          />\n        </div>\n      )  \n    }\n    return (\n      <div className=\"chart\">\n      <form onSubmit={(e)=>this.props.onSubmit(e)}><input type=\"submit\" value=\"Request new tracks\" /></form>\n        <Radar\n          data={incomingData.dataByTrack}\n          options={{\n            //draggable chart js configs\n            dragData: true,\n            dragDataRound:2,\n            showTooltip: true,\n            title:{\n              display:this.props.displayTitle,\n              text:this.props.title,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            },\n            scale:{\n              ticks:{\n                beginAtZero: true,\n                max: 1\n              }\n            },\n            onDragStart: function (e, element) {\n              // where e = event\n              //console.log('dragging ', element)\n              },\n            onDrag: function (e, datasetIndex, index, value) {\n              // change cursor style to grabbing during drag action\n              e.target.style.cursor = 'grabbing'\n              // where e = event\n              },\n            onDragEnd: (e, datasetIndex, index, value) => {              \n              // console.log('adjust the value of ',incomingData.spotifyAudioFeatures[index],' for the track ',incomingData.dataByTrack.datasets[datasetIndex]['label'], 'which is index number ',datasetIndex,'in the set to a value of ', value)\n\n              this.props.onDrag(datasetIndex, index, value);\n\n              // restore default cursor style upon drag release\n              e.target.style.cursor = 'default'\n              // where e = event\n              },\n            //enable grab icon when user hovers over control points\n            hover: {\n              onHover: function(e) {\n                // indicate that a datapoint is draggable by showing the 'grab' cursor when hovered\n                const point = this.getElementAtEvent(e)\n                if (point.length) e.target.style.cursor = 'grab'\n                else e.target.style.cursor = 'default'\n              }\n            }\n          }}\n        />\n        <Line\n          data={incomingData.dataByAudioFeature}\n          options={{\n            //draggable chart js configs\n            dragData: true,\n            dragDataRound:2,\n            title:{\n              display:this.props.displayTitle,\n              text:this.props.title,\n              fontSize:25\n            },\n            scales:{\n              yAxes:[{\n                ticks:{\n                  min: 0,\n                  max: 1,\n                  stepSize: 0.1\n                }\n              }]\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            },\n            onDragStart: function (e, element) {\n              // where e = event\n              },\n            onDrag: function (e, datasetIndex, index, value) {\n              // change cursor style to grabbing during drag action\n              e.target.style.cursor = 'grabbing'\n              // where e = event\n              },\n            onDragEnd: (e, datasetIndex, index, value) => {\n              // restore default cursor style upon drag release\n              //console.log('line')\n              //console.log('adjust the value of ',incomingData.spotifyAudioFeatures[datasetIndex],' for the track ',incomingData.dataByAudioFeature.labels[index], 'which is index number ',index,'in the set to a value of ', value)\n              //console.log('previous value for radar',incomingData.dataByTrack.datasets[index]['data'][datasetIndex])\n              this.props.onDrag(index, datasetIndex, value);\n              //incomingData.dataByTrack.datasets[index]['data'][datasetIndex] = value\n              e.target.style.cursor = 'default'\n              // where e = event\n              },\n            //enable grab icon when user hovers over control points\n            hover: {\n              onHover: function(e) {\n                // indicate that a datapoint is draggable by showing the 'grab' cursor when hovered\n                const point = this.getElementAtEvent(e)\n                if (point.length) e.target.style.cursor = 'grab'\n                else e.target.style.cursor = 'default'\n              }\n            }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n    }\n  }\n\n  handleDrag = (datasetIndex, index, value) => {\n    let selectedAttribute = this.state.rawIncomingData.spotifyAudioFeatures[index]  \n    this.setState(prevState => { //https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n      let selectedTrack = Object.assign({}, prevState.rawIncomingData.rawDataByTrack[datasetIndex]);  // creating copy of state variable jasper\n      selectedTrack.audioFeatures[selectedAttribute] = value;\n      selectedTrack.audioFeatures['shouldChange'] = 1;                                    \n      return { selectedTrack };                                 \n    })\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    console.log('submitted to the parent component')\n    // grab refresh token from URL\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let data = {\n      refresh_token: params.get('refresh_token'),\n      mode: params.get('mode')\n    };\n\n    let posturl = 'https://music-in-context-backend.herokuapp.com/changeset';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify({\n          previousTrackList: this.state.rawIncomingData.rawDataByTrack,\n          previousTrackIDs: this.state.rawIncomingData.trackIDs,\n          refresh_token: data.refresh_token,\n          mode: data.mode,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      this.setState(prevState => { //https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n        let rawIncomingData = Object.assign({}, prevState.rawIncomingData);\n        rawIncomingData.rawDataByTrack = data.newTracks;\n        rawIncomingData.trackIDs = data.trackIDs;\n        return { rawIncomingData };\n      })\n    })\n    .then(console.log(this.state))\n  }\n \n   componentDidMount(){\n     // grab refresh token from URL\n     let search = window.location.search;\n     let params = new URLSearchParams(search);\n     let data = {\n       refresh_token: params.get('refresh_token'),\n       mode: params.get('mode'),\n       form_data: params.get('form_data')\n     };\n\n    let posturl = 'https://music-in-context-backend.herokuapp.com/data';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        rawIncomingData: data\n      });\n    })\n   }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart rawIncomingData={this.state.rawIncomingData} title=\"Audio Features\" legendPosition=\"bottom\" onDrag={(datasetIndex, index, value) => this.handleDrag(datasetIndex, index, value)} onSubmit={(value) => this.handleSubmit(value)} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}