{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","require","isLoading","Chart","incomingData","trackNames","subTrackData","subAudioFeatureData","Object","keys","this","props","rawIncomingData","map","key","spotifyAudioFeatures","audioFeature","rawDataByTrack","track","push","trackName","dataByAudioFeature","datasets","labels","dataByTrack","colorIndexAF","seriesColor","colors","pointColorArray","pointBackgroundColorArray","pointRadiusArray","i","length","selectedTrackIndex","newAudioFeaturesObject","label","data","fill","borderColor","backgroundColor","radius","colorIndexBT","color","shouldDrawBorder","newTrackObject","drawBorder","error","console","log","className","style","display","justifyContent","alignItems","height","name","fadeIn","onSubmit","e","onRequestNewTracks","type","value","onCommitSet","options","responsive","maintainAspectRatio","dragData","dragDataRound","showTooltip","title","text","fontSize","legend","position","scale","ticks","beginAtZero","max","onDragStart","element","onColorChange","_datasetIndex","onDrag","datasetIndex","index","target","cursor","onDragEnd","hover","onHover","getElementAtEvent","scales","yAxes","min","stepSize","displayLegend","_index","Component","defaultProps","displayTitle","legendPosition","App","handleDrag","selectedAttribute","state","setState","prevState","selectedTrack","assign","audioFeatures","handleColorChange","handleReset","event","preventDefault","previousState","search","window","location","params","URLSearchParams","refresh_token","get","mode","fetch","method","body","JSON","stringify","headers","then","previousTrackList","previousTrackIDs","trackIDs","response","json","newTracks","form_data","posturl","handleRequestNewTracks","handleCommitSet","onReset","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.83b6ccd2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Line, Radar } from 'react-chartjs-2';\nimport 'chartjs-plugin-dragdata';\n\nvar Spinner = require('react-spinkit');\n\nlet isLoading = true;\n\nclass Chart extends Component{\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    colors: ['rgba(245, 94, 29, 0.8)', 'rgba(0, 0, 0, 0.3)'],\n    //location:'City'\n  }\n\n  render(){\n    \n    //unpack data into chart-able format\n    var incomingData = {\n      trackNames: [],\n      subTrackData: {},\n      subAudioFeatureData: {}\n    }\n    // pull data from props into new object\n    try {\n      Object.keys(this.props.rawIncomingData).map(key => (\n        incomingData[key] = this.props.rawIncomingData[key]\n        )\n      )\n      //assign blank arrays to store data by attribute\n      incomingData.spotifyAudioFeatures.map((audioFeature) => {\n        incomingData.subAudioFeatureData[audioFeature] = []\n      })\n      // push each data point on to the corresponding array\n      incomingData.rawDataByTrack.map((track) => {\n        incomingData['trackNames'].push(track.trackName)\n        incomingData.subTrackData[track.trackName] = []\n        //loop thru audio features appending to relevant arrays\n        {incomingData.spotifyAudioFeatures.map((audioFeature) => {\n          incomingData.subAudioFeatureData[audioFeature].push(track['audioFeatures'][audioFeature])\n          incomingData.subTrackData[track.trackName].push(track['audioFeatures'][audioFeature])\n        })}\n      })      \n      //create the dataByAttribute object\n      incomingData.dataByAudioFeature = {\n        datasets: [],\n        labels: incomingData.trackNames\n      }\n      incomingData.dataByTrack = {\n        datasets: [],\n        labels: incomingData.spotifyAudioFeatures\n      }\n      // create an object for each attribute\n      let colorIndexAF = 0;\n      incomingData.spotifyAudioFeatures.map((audioFeature) => {\n        let seriesColor = incomingData.colors[colorIndexAF]\n        let pointColorArray = []\n        let pointBackgroundColorArray = []\n        let pointRadiusArray = []\n        for (var i = 0; i < incomingData.trackNames.length; i++) {\n          if(i == this.props.selectedTrackIndex){\n            pointColorArray.push('rgba(245, 94, 29, 1)');\n            pointBackgroundColorArray.push('rgba(245, 94, 29, 1)')\n            pointRadiusArray.push(6)\n          }\n          else{\n            pointColorArray.push(seriesColor);\n            pointBackgroundColorArray.push('rgba(0, 0, 0, 0.1)')\n            pointRadiusArray.push(3)\n          }\n          \n        }\n        let newAudioFeaturesObject = {\n          label: audioFeature,\n          data: incomingData.subAudioFeatureData[audioFeature],\n          fill: false,\n          borderColor: pointColorArray,\n          backgroundColor: pointBackgroundColorArray,\n          radius: pointRadiusArray\n        }\n        colorIndexAF += 1\n        incomingData.dataByAudioFeature.datasets.push(newAudioFeaturesObject)\n      })\n      // create an object for each track  \n      let colorIndexBT = 0;\n      incomingData.rawDataByTrack.map((track) => {\n        let color = this.props.colors[1]\n        let shouldDrawBorder = false\n        if (colorIndexBT === this.props.selectedTrackIndex){\n          color = this.props.colors[0]\n          shouldDrawBorder = true\n        }\n        colorIndexBT += 1\n        let newTrackObject = {\n          label: track.trackName,\n          data: incomingData.subTrackData[track.trackName],\n          fill: true,\n          borderColor: color,\n          drawBorder: shouldDrawBorder\n        }\n        // if (colorIndexBT === 0){\n        //   colorIndexBT = 1\n        // }\n        incomingData.dataByTrack.datasets.push(newTrackObject)\n      })\n      isLoading = false;\n    }\n    catch (error) {\n      console.log('still loading data');\n      isLoading = true;\n    }\n\n    if (isLoading) {\n      return (\n        <div className=\"loading\">\n          <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '50vh'}}>\n            <Spinner name='ball-triangle-path' fadeIn='none'/>\n          </div>\n          <div>\n            <h1>Loading track data...</h1>\n          </div>\n        </div>\n      )\n\n    }\n    return (\n      <div className=\"chart\">\n        <div className=\"topRow\">\n          <div className=\"buttons\">\n            <form onSubmit={(e)=>this.props.onRequestNewTracks(e)}><input type=\"submit\" value=\"Swap adjusted tracks with new recommendations\" /></form>\n            <form onSubmit={(e)=>this.props.onCommitSet(e)}><input type=\"submit\" value=\"Upload this playlist to Spotify\" /></form>\n          </div>\n          <div className=\"radar\">\n            <Radar\n              data={incomingData.dataByTrack}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                //draggable chart js configs\n                dragData: true,\n                dragDataRound:2,\n                showTooltip: true,\n                title:{\n                  display:false,\n                  text:this.props.title,\n                  fontSize:25\n                },\n                legend:{\n                  display:true,\n                  position:'right'\n                },\n                scale:{\n                  ticks:{\n                    beginAtZero: true,\n                    max: 1\n                  } \n                },\n                onDragStart: (e, element) => {\n                  // where e = event\n                  this.props.onColorChange(element._datasetIndex);\n                  },\n                onDrag: function (e, datasetIndex, index, value) {\n                  // change cursor style to grabbing during drag action\n                  e.target.style.cursor = 'grabbing'\n                  // where e = event\n                  },\n                onDragEnd: (e, datasetIndex, index, value) => {              \n                  this.props.onDrag(datasetIndex, index, value);\n                  // restore default cursor style upon drag release\n                  e.target.style.cursor = 'default'\n                  // where e = event\n                  },\n                //enable grab icon when user hovers over control points\n                hover: {\n                  onHover: function(e) {\n                    // indicate that a datapoint is draggable by showing the 'grab' cursor when hovered\n                    const point = this.getElementAtEvent(e)\n                    if (point.length) e.target.style.cursor = 'grab'\n                    else e.target.style.cursor = 'default'\n                  }\n                }\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"line\">\n          <Line\n            data={incomingData.dataByAudioFeature}\n            options={{\n              responsive: true,\n              maintainAspectRatio: false,\n              //draggable chart js configs\n              dragData: true,\n              dragDataRound:2,\n              title:{\n                display:false,\n                text:this.props.title,\n                fontSize:25\n              },\n              scales:{\n                yAxes:[{\n                  ticks:{\n                    min: 0,\n                    max: 1,\n                    stepSize: 0.1\n                  }\n                }]\n              },\n              legend:{\n                display:this.props.displayLegend,\n                position:'right'\n              },\n              onDragStart: (e, element) => {\n                // where e = event\n                this.props.onColorChange(element._index);\n                },\n              onDrag: function (e, datasetIndex, index, value) {\n                // change cursor style to grabbing during drag action\n                e.target.style.cursor = 'grabbing'\n                // where e = event\n                },\n              onDragEnd: (e, datasetIndex, index, value) => {\n                this.props.onDrag(index, datasetIndex, value);\n                //incomingData.dataByTrack.datasets[index]['data'][datasetIndex] = value\n                e.target.style.cursor = 'default'\n                // where e = event\n                },\n              //enable grab icon when user hovers over control points\n              hover: {\n                onHover: function(e) {\n                  // indicate that a datapoint is draggable by showing the 'grab' cursor when hovered\n                  const point = this.getElementAtEvent(e)\n                  if (point.length) e.target.style.cursor = 'grab'\n                  else e.target.style.cursor = 'default'\n                }\n              }\n            }}\n            />\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n    }\n  }\n\n  handleDrag = (datasetIndex, index, value) => {\n    let selectedAttribute = this.state.rawIncomingData.spotifyAudioFeatures[index]  \n    this.setState(prevState => { //https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n      let selectedTrack = Object.assign({}, prevState.rawIncomingData.rawDataByTrack[datasetIndex]);  // creating copy of state variable jasper\n      selectedTrack.audioFeatures[selectedAttribute] = value;\n      selectedTrack.audioFeatures['shouldChange'] = 1;                                    \n      return { selectedTrack };                                 \n    })\n  }\n\n  handleColorChange = (index) =>{\n    this.setState(prevState => { //https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n      let selectedTrackIndex = Object.assign({}, prevState.selectedTrackIndex); \n      selectedTrackIndex = index;\n      return { selectedTrackIndex };\n    })\n  }\n\n  handleReset = (event) =>{\n    event.preventDefault();\n    console.log(\"Reset triggered\")\n    //TODO this doesn't work\n    this.setState({\n      rawIncomingData: this.state.previousState\n    })\n  }\n\n  handleCommitSet(event){\n    event.preventDefault();\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let data = {\n      refresh_token: params.get('refresh_token'),\n      mode: params.get('mode')\n    };\n\n    let posturl = 'https://music-in-context-backend.herokuapp.com/commitplaylist';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify({\n          refresh_token: data.refresh_token,\n          mode: data.mode,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(console.log(\"Sent to Spotify\"))\n  }\n\n  handleRequestNewTracks(event){\n    event.preventDefault();\n    // grab refresh token from URL\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let data = {\n      refresh_token: params.get('refresh_token'),\n      mode: params.get('mode')\n    };\n\n    let posturl = 'https://music-in-context-backend.herokuapp.com/changeset';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify({\n          previousTrackList: this.state.rawIncomingData.rawDataByTrack,\n          previousTrackIDs: this.state.rawIncomingData.trackIDs,\n          refresh_token: data.refresh_token,\n          mode: data.mode,\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      this.setState(prevState => { //https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n        let rawIncomingData = Object.assign({}, prevState.rawIncomingData);\n        rawIncomingData.rawDataByTrack = data.newTracks;\n        rawIncomingData.trackIDs = data.trackIDs;\n        return { rawIncomingData };\n      })\n    })\n    .then(console.log(this.state))\n  }\n \n   componentDidMount(){\n     // grab refresh token from URL\n     let search = window.location.search;\n     let params = new URLSearchParams(search);\n     let data = {\n       refresh_token: params.get('refresh_token'),\n       mode: params.get('mode'),\n       form_data: params.get('form_data')\n     };\n\n    let posturl = '';\n    if(data.mode == 'tunnel'){\n      posturl = 'https://music-in-context-backend.herokuapp.com/setfromcluster';\n    }\n    else if(data.mode == 'playlist'){\n      posturl = 'https://music-in-context-backend.herokuapp.com/setfromplaylist';\n    }\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        rawIncomingData: data,\n        previousState: data,\n        selectedTrackIndex: 1\n      });\n    })\n   }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart \n        rawIncomingData={this.state.rawIncomingData} \n        title=\"Audio Features\" \n        legendPosition=\"bottom\" \n        onDrag={(datasetIndex, index, value) => this.handleDrag(datasetIndex, index, value)} \n        onRequestNewTracks={(value) => this.handleRequestNewTracks(value)} \n        onCommitSet={(value) => this.handleCommitSet(value)} \n        onReset={(value) => this.handleReset(value)} \n        onColorChange={(element) => this.handleColorChange(element)} \n        colors={['rgba(245, 94, 29, 1)', 'rgba(0, 0, 0, 0.1)']}\n        selectedTrackIndex={this.state.selectedTrackIndex}   \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}