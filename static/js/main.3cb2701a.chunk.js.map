{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","console","log","this","incomingData","trackNames","Object","keys","rawIncomingData","map","key","spotifyAudioFeatures","audioFeature","rawDataByTrack","track","push","trackName","dataByAudioFeature","datasets","labels","dataByTrack","newAudioFeaturesObject","label","data","fill","borderColor","newTrackObject","error","className","options","dragData","dragDataRound","showTooltip","title","display","displayTitle","text","location","fontSize","legend","displayLegend","position","legendPosition","scale","ticks","beginAtZero","max","onDragStart","e","element","onDrag","datasetIndex","index","value","target","style","cursor","onDragEnd","hover","onHover","getElementAtEvent","length","scales","yAxes","min","stepSize","Component","defaultProps","App","state","search","window","params","URLSearchParams","refresh_token","get","mode","form_data","fetch","method","body","JSON","stringify","headers","then","response","json","setState","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wNAIMA,G,mBACJ,WAAYC,GAAO,qEACXA,I,sEAUC,IAAD,OAINC,QAAQC,IAAIC,KAAKH,OACjB,IAAII,EAAe,CACjBC,WAAY,IAGd,IACEC,OAAOC,KAAKJ,KAAKH,MAAMQ,iBAAiBC,KAAI,SAAAC,GAAG,OAC7CN,EAAaM,GAAO,EAAKV,MAAMQ,gBAAgBE,MAIjDN,EAAaO,qBAAqBF,KAAI,SAACG,GACrCR,EAAaQ,GAAgB,MAG/BR,EAAaS,eAAeJ,KAAI,SAACK,GAC/BV,EAAY,WAAeW,KAAKD,EAAME,WACtCZ,EAAaU,EAAME,WAAa,GAE/BZ,EAAaO,qBAAqBF,KAAI,SAACG,GACtCR,EAAaQ,GAAcG,KAAKD,EAAK,cAAkBF,IACvDR,EAAaU,EAAME,WAAWD,KAAKD,EAAK,cAAkBF,UAI9DR,EAAaa,mBAAqB,CAChCC,SAAU,GACVC,OAAQf,EAAaC,YAEvBD,EAAagB,YAAc,CACzBF,SAAU,GACVC,OAAQf,EAAaO,sBAGvBP,EAAaO,qBAAqBF,KAAI,SAACG,GACrC,IAAIS,EAAyB,CAC3BC,MAAOV,EACPW,KAAMnB,EAAaQ,GACnBY,MAAM,EACNC,YAAa,yBAEfxB,QAAQC,IAAImB,GACZjB,EAAaa,mBAAmBC,SAASH,KAAKM,MAGhDjB,EAAaS,eAAeJ,KAAI,SAACK,GAC/B,IAAIY,EAAiB,CACnBJ,MAAOR,EAAME,UACbO,KAAMnB,EAAaU,EAAME,WACzBQ,MAAM,EACNC,YAAa,yBAEfrB,EAAagB,YAAYF,SAASH,KAAKW,MAEzCzB,QAAQC,IAAI,+BAAgCE,GAE9C,MAAOuB,GACL1B,QAAQC,IAAI,sBASd,OACE,yBAAK0B,UAAU,SACb,kBAAC,IAAD,CACEL,KAAMnB,EAAagB,YACnBS,QAAS,CAEPC,UAAU,EACVC,cAAc,EACdC,aAAa,EACbC,MAAM,CACJC,QAAQ/B,KAAKH,MAAMmC,aACnBC,KAAKjC,KAAKH,MAAMqC,SAChBC,SAAS,IAEXC,OAAO,CACLL,QAAQ/B,KAAKH,MAAMwC,cACnBC,SAAStC,KAAKH,MAAM0C,gBAEtBC,MAAM,CACJC,MAAM,CACJC,aAAa,EACbC,IAAK,IAGTC,YAAa,SAAUC,EAAGC,GAExBhD,QAAQC,IAAI,YAAa+C,IAE3BC,OAAQ,SAAUF,EAAGG,EAAcC,EAAOC,GAExCL,EAAEM,OAAOC,MAAMC,OAAS,YAG1BC,UAAW,SAAUT,EAAGG,EAAcC,EAAOC,GAE3CpD,QAAQC,IAAI,kBACZD,QAAQC,IAAIiD,EAAcC,EAAOC,GACjCL,EAAEM,OAAOC,MAAMC,OAAS,WAI1BE,MAAO,CACLC,QAAS,SAASX,GAEF7C,KAAKyD,kBAAkBZ,GAC3Ba,OAAQb,EAAEM,OAAOC,MAAMC,OAAS,OACrCR,EAAEM,OAAOC,MAAMC,OAAS,eAKrC,kBAAC,IAAD,CACEjC,KAAMnB,EAAaa,mBACnBY,QAAS,CAEPC,UAAU,EACVC,cAAc,EACdE,MAAM,CACJC,QAAQ/B,KAAKH,MAAMmC,aACnBC,KAAKjC,KAAKH,MAAMqC,SAChBC,SAAS,IAEXwB,OAAO,CACLC,MAAM,CAAC,CACLnB,MAAM,CACJoB,IAAK,EACLlB,IAAK,EACLmB,SAAU,OAIhB1B,OAAO,CACLL,QAAQ/B,KAAKH,MAAMwC,cACnBC,SAAStC,KAAKH,MAAM0C,wB,GA3JdwB,cAAdnE,EAKGoE,aAAe,CACpBhC,cAAa,EACbK,eAAe,EACfE,eAAe,QACfL,SAAS,QA2JEtC,QC/GAqE,E,YAlDb,aAAc,IAAD,8BACX,+CACKC,MAAQ,GAFF,E,iFAMQ,IAAD,OAEbC,EAASC,OAAOlC,SAASiC,OACzBE,EAAS,IAAIC,gBAAgBH,GAC7B/C,EAAO,CACTmD,cAAeF,EAAOG,IAAI,iBAC1BC,KAAMJ,EAAOG,IAAI,QACjBE,UAAWL,EAAOG,IAAI,cAYzBG,MAHc,sDAGA,CACVF,KAAM,OACNG,OAAQ,OACRC,KAAMC,KAAKC,UAAU3D,GACrB4D,QAAS,CACP,eAAgB,sBAGrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA7D,GACJ,EAAKgE,SAAS,CACZ/E,gBAAiBe,S,+BAMrB,OACE,yBAAKK,UAAU,OACb,kBAAC,EAAD,CAAOpB,gBAAiBL,KAAKkE,MAAM7D,gBAAiB6B,SAAS,iBAAiBK,eAAe,gB,GA7CnFwB,aCMEsB,QACW,cAA7BjB,OAAOlC,SAASoD,UAEe,UAA7BlB,OAAOlC,SAASoD,UAEhBlB,OAAOlC,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAzE,GACL1B,QAAQ0B,MAAMA,EAAM0E,a","file":"static/js/main.3cb2701a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Line, Radar } from 'react-chartjs-2';\nimport 'chartjs-plugin-dragdata';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    location:'City'\n  }\n\n  render(){\n    // unpack data into format for charts\n    // console.log('raw data arriving in chart component', this.props.rawIncomingData)\n    //listify all the data\n    console.log(this.props)\n    var incomingData = {\n      trackNames: []\n    }\n    // pull data from props into new object\n    try {\n      Object.keys(this.props.rawIncomingData).map(key => (\n        incomingData[key] = this.props.rawIncomingData[key]\n        )\n      )\n      //assign blank arrays to store data by attribute\n      incomingData.spotifyAudioFeatures.map((audioFeature) => {\n        incomingData[audioFeature] = []\n      })\n      // push each data point on to the corresponding array\n      incomingData.rawDataByTrack.map((track) => {\n        incomingData['trackNames'].push(track.trackName)\n        incomingData[track.trackName] = []\n        //loop thru audio features appending to relevant arrays\n        {incomingData.spotifyAudioFeatures.map((audioFeature) => {\n          incomingData[audioFeature].push(track['audioFeatures'][audioFeature])\n          incomingData[track.trackName].push(track['audioFeatures'][audioFeature])\n        })}\n      })      \n      //create the dataByAttribute object\n      incomingData.dataByAudioFeature = {\n        datasets: [],\n        labels: incomingData.trackNames\n      }\n      incomingData.dataByTrack = {\n        datasets: [],\n        labels: incomingData.spotifyAudioFeatures\n      }\n      // create an object for each attribute\n      incomingData.spotifyAudioFeatures.map((audioFeature) => {\n        let newAudioFeaturesObject = {\n          label: audioFeature,\n          data: incomingData[audioFeature],\n          fill: false,\n          borderColor: \"rgba(94, 177, 208, 1)\"\n        }\n        console.log(newAudioFeaturesObject)\n        incomingData.dataByAudioFeature.datasets.push(newAudioFeaturesObject)\n      })\n      // create an object for each track\n      incomingData.rawDataByTrack.map((track) => {\n        let newTrackObject = {\n          label: track.trackName,\n          data: incomingData[track.trackName],\n          fill: false,\n          borderColor: \"rgba(94, 177, 208, 1)\"\n        }\n        incomingData.dataByTrack.datasets.push(newTrackObject)\n      })\n      console.log('incoming data fully unpacked', incomingData)\n    }\n    catch (error) {\n      console.log('still loading data')\n    }\n\n\n   //{incomingData.spotifyAudioFeatures.map((attribute) => {\n   // console.log(attribute)\n   //})}\n    ////////////////////////////////////////////////////////////////\n\n    return (\n      <div className=\"chart\">\n        <Radar\n          data={incomingData.dataByTrack}\n          options={{\n            //draggable chart js configs\n            dragData: true,\n            dragDataRound:2,\n            showTooltip: true,\n            title:{\n              display:this.props.displayTitle,\n              text:this.props.location,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            },\n            scale:{\n              ticks:{\n                beginAtZero: true,\n                max: 1\n              }\n            },\n            onDragStart: function (e, element) {\n              // where e = event\n              console.log('dragging ', element)\n              },\n            onDrag: function (e, datasetIndex, index, value) {\n              // change cursor style to grabbing during drag action\n              e.target.style.cursor = 'grabbing'\n              // where e = event\n              },\n            onDragEnd: function (e, datasetIndex, index, value) {\n              // restore default cursor style upon drag release\n              console.log('done dragging!')\n              console.log(datasetIndex, index, value)\n              e.target.style.cursor = 'default'\n              // where e = event\n              },\n            //enable grab icon when user hovers over control points\n            hover: {\n              onHover: function(e) {\n                // indicate that a datapoint is draggable by showing the 'grab' cursor when hovered\n                const point = this.getElementAtEvent(e)\n                if (point.length) e.target.style.cursor = 'grab'\n                else e.target.style.cursor = 'default'\n              }\n            }\n          }}\n        />\n        <Line\n          data={incomingData.dataByAudioFeature}\n          options={{\n            //draggable chart js configs\n            dragData: true,\n            dragDataRound:1,\n            title:{\n              display:this.props.displayTitle,\n              text:this.props.location,\n              fontSize:25\n            },\n            scales:{\n              yAxes:[{\n                ticks:{\n                  min: 0,\n                  max: 1,\n                  stepSize: 0.1\n                }\n              }]\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n    }\n  }\n \n   componentDidMount(){\n     // grab refresh token from URL\n     let search = window.location.search;\n     let params = new URLSearchParams(search);\n     let data = {\n       refresh_token: params.get('refresh_token'),\n       mode: params.get('mode'),\n       form_data: params.get('form_data')\n     };\n    // //hard coded for testing\n    //  let data = {\n    //   refresh_token: 'AQACS834nGRrzXZySKHt90Nsu7vZWpKCmCM73hGFiva-nDRE5NHgg6q5XTvlH4tDcAfYvCIaLdMN2EerUVS2CyyYgPXR1crpFxtwvFQYqFJh8bhLQuCThQnto-AMhxszuCs',\n    //   mode: 'playlist',\n    //   form_data: '4MZTnMUwga6imMXcrepZ7y'\n    // };\n\n    let posturl = 'https://music-in-context-backend.herokuapp.com/data';\n    //let posturl = 'http://127.0.0.1:7000/data';\n    //send a post to the backend API to run the calcs and respond with data\n    fetch(posturl,{\n        mode: 'cors',\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        rawIncomingData: data\n      });\n    })\n   }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart rawIncomingData={this.state.rawIncomingData} location=\"Audio Features\" legendPosition=\"bottom\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}